{"version":3,"sources":["logo.svg","tile.js","dungeon.js","monsterTable.js","monsterGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["getTile","x","y","w","tiles","length","Span","styled","span","props","width","tile","className","onClick","doorMasks","setTile","setDoorMasks","onSelectRoom","door","newDoorMasks","map","e","offsets","mask","ret","push","offsetsFromMask","console","log","off","doorClickHandler","children","val","setTileOr","isEmptyDir","height","dirX","dirY","Math","floor","xo","yo","setTileSquareDir","getFeature","random","dX","dY","mapWidth","mapHeight","fw","fh","feature","roomID","t","intBetween","icons","bitmaskFrom","reverseBitmaskFrom","cx","cy","getRoad","maxLength","dx","dy","findWall","rand","wallFound","wallTries","wallX","wallY","wallDirX","wallDirY","Dungeon","React","useState","setTiles","bitmasks","setBitmasks","drawMasks","setDrawMasks","setIcons","setSelectedRoom","useEffect","create","seed","masks","newDrawMasks","range","h","setTileSquare","tries","calculateBitmasks","draw","randomizeDraw","useReducer","allTiles","id","tileID","bitmask","on","min","iconElements","Div","div","MonsterTable","multipliers","xp","setXP","list","setList","done","environment","env","get","environmentString","Random","index","mon","xpTargets","difficulty","adjust","max","smallest","smallestI","i","m","splice","copyMonster","newList","el","target","removeMonster","monsters","name","progressValue","value","MonsterGenerator","xpByCharLevel","compensate","setCompensate","setSeed","players","setPlayers","playerLevel","setPlayerLevel","charLevels","setCharLevels","setEnvironmentString","maxMonsters","setMaxMonsters","setDifficulty","arr","setCharLevelArray","type","onChange","event","localStorage","setItem","App","crToXP","Map","set","setEnvironment","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","rowsV","data","environments","split","en","replace","has","newArr","Array","cr","getData","path","element","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55c58d18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from 'styled-components'\n\nconst UP = 1, DOWN = 2, LEFT = 4, RIGHT = 8, DISABLED = 16;\n\nconst getTile = (x, y, w, tiles) => {\n    if (x > w) return -1\n    if (y > tiles.length / w) return -1\n    if (x < 0 || y < 0) return -1\n    return tiles[x + (y * w)]\n}\n\nconst offsetsFromMask = (mask) => {\n    var ret = []\n    if (mask & DOWN) ret.push([0, 1])\n    if (mask & UP) ret.push([0, -1])\n    if (mask & RIGHT) ret.push([1, 0])\n    if (mask & LEFT) ret.push([-1, 0])\n    return ret\n\n}\n\n\nconst doorClickHandler = (x, y, w, doorMasks, setTile, setDoorMasks, tiles, onSelectRoom) => {\n    // var x = e.target.getAttribute(\"x\")\n    // var y = e.target.getAttribute(\"y\")\n    // var w = e.target.getAttribute(\"w\")\n    // var doorMasks = e.target.getAttribute(\"doorMasks\")\n    var door = getTile(x, y, w, doorMasks)\n    //console.log(\"start \" + door)\n    var newDoorMasks = doorMasks.map((e) => e)\n    var offsets = offsetsFromMask(door)\n    offsets.push([0, 0])\n    let tile = getTile(x, y, w, tiles)\n    console.log(\"tile \" + tile)\n    onSelectRoom(tile);\n    \n    if (door & DISABLED){\n        \n        for (var off of offsets){\n            setTile(x+off[0], y+off[1], w, newDoorMasks, getTile(x+off[0], y+off[1], w, doorMasks) & 15)\n            //console.log(\"close \" + (door & 15))\n        }\n        \n    } \n    else{\n        for (var off of offsets){\n\n            setTile(x+off[0], y+off[1], w, newDoorMasks, getTile(x+off[0], y+off[1], w, doorMasks) | DISABLED)\n            //console.log(\"open \" + (door | DISABLED))\n        }\n        // alert(\"door dis \" + door + \" => \" + (door | DISABLED) + \" = \" + getTile(x, y, w, newDoorMasks) + \"(\" + x + \",\" + y )\n    } \n    setDoorMasks(newDoorMasks)\n}\n\nconst Span = styled.span`\n    width: ${(props) => 95/props.width}vmin;\n    height: ${(props) => 95/props.width}vmin;\n    \n`\n\nconst tile = (props) => {\n    return <Span width={props.width} className={props.className} onClick={() => {doorClickHandler(props.x, props.y, props.width, props.doorMasks, props.setTile, props.setDoorMasks, props.tiles, props.onSelectRoom)}}>{props.children}</Span>\n}\n\nexport default tile","import React from 'react'\nimport random from 'random-seed'\nimport PF from 'pathfinding'\nimport Tile from './tile'\nimport styled from 'styled-components'\nimport {FaBeer} from 'react-icons/fa'\n\n/* \n:root {\n    --tile-size: 1rem;\n  }\n\n  .tile0 {\n \n  border-radius: 1.5rem .125rem 1.2rem .125rem/ .125rem 1.52rem .125rem 1.82rem;\n  border-width: 1.4px 1px 1.1px 1.6px;\n \n}\n  */\n\n\nconst TILE_EMPTY = 0\nconst TILE_PATH = 2\nconst ICON_ROOM_NUMBER = 1\nconst roomColors = [\"white\", \"pink\", \"light-green\", \"light-blue\"]\n\nconst setTile = (x, y, w, tiles, val) => {\n    tiles[x + (y * w)] = val\n}\nconst setTileOr = (x, y, w, tiles, val) => {\n    tiles[x + (y * w)] |= val\n}\nconst setTileSquare = (x, y, w, tiles, val, width, height) => {\n    for (let xo = 0; xo < width; xo++)\n        for (let yo = 0; yo < height; yo++)\n            setTile(x+xo, y+yo, w, tiles, val)\n}\nconst isEmpty = (x, y, w, tiles, width, height) => {\n    if (x + width > w-1) return false;\n    if (y + height > (tiles.length / w)-1) return false\n    if ( x < 1 || y < 1) return false\n    for (let xo = 0; xo < width; xo++)\n        for (let yo = 0; yo < height; yo++)\n            if (getTile(x+xo, y+yo, w, tiles) !== 0) return false;\n    return true;\n}\nconst isEmptyDir = (x, y, w, tiles, width, height, dirX, dirY) => {\n    //dir is negative\n    if (dirX === 0){\n        x -= Math.floor(width/2)\n        if (dirY === 1) y -= height-1\n    } else {\n        y -= Math.floor(height/2)\n        if (dirX === 1) x -= width-1\n    }\n    if (x + width > w-1) return false\n    if (y + height > (tiles.length / w)-1) return false\n    if (x < 1 || y < 1) return false\n    for (let xo = 0; xo < width; xo++)\n        for (let yo = 0; yo < height; yo++)\n            if (getTile(x+xo, y+yo, w, tiles) !== 0) return false;\n    return true;\n}\nconst setTileSquareDir = (x, y, w, tiles, val, width, height, dirX, dirY) => {\n    if (dirX === 0){\n        x -= Math.floor(width/2)\n        // console.log(\"compensate x \" + (Math.floor(width/2)) + \" w \" + width)\n\n        if (dirY === 1) y -= height-1\n    } else {\n        y -= Math.floor(height/2)\n        if (dirX === 1) x -= width-1\n    }\n    for (let xo = 0; xo < width; xo++)\n        for (let yo = 0; yo < height; yo++)\n            setTile(x+xo, y+yo, w, tiles, val)\n}\nconst getTile = (x, y, w, tiles) => {\n    if (x > w) return -1\n    if (y > tiles.length / w) return -1\n    if (x < 0 || y < 0) return -1\n    return tiles[x + (y * w)]\n}\n\nconst getFeature = (random, dX, dY, mapWidth, mapHeight) => {\n    var fw, fh\n    var feature = (x, y, fw, fh, dirX, dirY, mapWidth, roomID, t, random) => {\n\n    };\n    switch (random.intBetween(0, 4)){\n        default:\n        //room\n            fw =  random.intBetween(3,  Math.floor(mapWidth/2));\n            fh =  random.intBetween(3, Math.floor(mapHeight/2));\n            feature = (x, y, fw, fh, dirX, dirY, roomID, mapWidth, t, random, doorMasks, icons) => {\n                setTileSquareDir(x, y, mapWidth, t, roomID, fw, fh,  dirX, dirY)\n                // setTile(x, y, mapWidth, t, 1)\n                // setTileOr(x, y, mapWidth, doors, bitmaskFrom(dirX, dirY))\n                setTileOr(x,y,mapWidth, doorMasks, bitmaskFrom(dirX, dirY))\n                setTileOr(x+dirX,y+dirY,mapWidth, doorMasks, reverseBitmaskFrom(dirX, dirY))\n\n                // setTileOr(x-((fw*dirX)/2), y-((fh*dirY)/2), mapWidth, icons, ICON_ROOM_NUMBER)\n                var cx = Math.floor(fw * dirX * .5 - (.5 * dirX))\n                var cy = Math.floor(fh * dirY * .5 - (.5 * dirY))\n                // cx = 0\n                // cy = 0\n                setTileOr(x-cx, y-cy, mapWidth, icons, ICON_ROOM_NUMBER)\n                return roomID+1\n            }\n            break;\n        case 0://passage\n                return getRoad(random, dX, dY, mapWidth, mapHeight, mapWidth/2) \n            break;\n        //case 2:\n            break;\n    }\n    return [feature, fw, fh]\n}\n\nconst getRoad = (random, dX, dY, mapWidth, mapHeight, maxLength) => {\n    var fw, fh\n    var feature\n                fw =  random.intBetween(2,  Math.floor(maxLength));\n                fh =  random.intBetween(2, Math.floor(maxLength));\n                \n                if (dX !== 0){\n                    fh = 3\n                    feature = (x, y, fw, fh, dirX, dirY, roomID, mapWidth, t, random, doorMasks, icons) => {\n                        setTileSquareDir(x, y, mapWidth, t, 2, fw, fh-2,  dirX, dirY)\n                        var toTile = getTile(x+dirX, y+dirY, mapWidth, t)\n                        if (toTile !== 2) {\n                            // setTile(x, y, mapWidth, t, 1)\n                            setTileOr(x,y,mapWidth, doorMasks, bitmaskFrom(dirX, dirY))\n                            setTileOr(x+dirX,y+dirY,mapWidth, doorMasks, reverseBitmaskFrom(dirX, dirY))\n                        }\n                        return roomID\n                    }  \n                } else {\n                    fw = 3\n                    feature = (x, y, fw, fh, dirX, dirY, roomID, mapWidth, t, random, doorMasks, icons) => {\n                        setTileSquareDir(x, y, mapWidth, t, 2, fw-2, fh,  dirX, dirY)\n                        var toTile = getTile(x+dirX, y+dirY, mapWidth, t)\n                        if (toTile !== 2)  {\n                            // setTile(x, y, mapWidth, t, 1)\n                            setTileOr(x,y,mapWidth, doorMasks, bitmaskFrom(dirX, dirY))\n                            setTileOr(x+dirX,y+dirY,mapWidth, doorMasks, reverseBitmaskFrom(dirX, dirY))\n                        }\n                        return roomID\n                    }  \n                }\n            \n    \n    return [feature, fw, fh]\n}\n\nconst UP = 1, DOWN = 2, LEFT = 4, RIGHT = 8, DISABLED = 16;\nconst bitmaskFrom = (dx, dy) => {\n    if (dx === -1) return LEFT\n    if (dx === 1) return RIGHT\n    if (dy === 1) return DOWN\n    if (dy === -1) return UP\n}\nconst reverseBitmaskFrom = (dx, dy) => {\n    if (dx === 1) return LEFT\n    if (dx === -1) return RIGHT\n    if (dy === -1) return DOWN\n    if (dy === 1) return UP\n}\nconst calculateBitmasks = (t, masks, w, h) => {\n    for (var x = 1; x < w-1; x++)\n        for (var y = 1; y < h-1; y++){\n            var mask = 0;\n            var tile = getTile(x, y, w, t)\n            if (getTile(x,y+1,w,t) != tile)\n                mask += DOWN;\n            if (getTile(x,y-1,w,t) != tile)\n                mask += UP;\n            if (getTile(x+1,y,w,t) != tile)\n                mask += RIGHT;\n            if (getTile(x-1,y,w,t) != tile)\n                mask += LEFT\n            setTile(x,y,w, masks, mask)\n            // setTile(x, y, w, masks, 15)\n        }\n}\n\nconst randomizeDraw = (w, draw, rand) => {\n    var h = Math.floor(draw.length/w)\n    for (var x = 1; x < w-1; x+=1)\n        for (var y = 1; y < h-1; y+=1){\n            var yOffset = y%2\n            if ((x+yOffset)%2) continue\n            \n            if (rand.range(2)) \n            setTileOr(x, y, w, draw, UP)\n            else \n            setTileOr(x, y-1, w, draw, DOWN)\n\n            if (rand.range(2)) \n            setTileOr(x, y, w, draw, DOWN)\n            else \n            setTileOr(x, y+1, w, draw, UP)\n\n            if (rand.range(2)) \n            setTileOr(x, y, w, draw, LEFT)\n            else \n            setTileOr(x-1, y, w, draw, RIGHT)\n\n            if (rand.range(2)) \n            setTileOr(x, y, w, draw, RIGHT)\n            else \n            setTileOr(x+1, y, w, draw, LEFT)\n            // setTile(x, y, w, draw, 15)\n            \n            // console.log(\"x:\"+x+\" y:\"+y + \" h\"+h +\" w\"+w)\n        }\n}\n\nconst findWall = (t, mapWidth, mapHeight, rand) => {\n            var wallFound = false\n            var wallTries = 0\n            var wallX = 0\n            var wallY = 0\n            var wallDirX = 0\n            var wallDirY = 0\n            while (!wallFound && wallTries++ < 100){\n                var x = rand.intBetween(1, mapWidth-2)\n                var y = rand.intBetween(1, mapHeight-2)\n                if (getTile(x,y,mapWidth, t) === 0){\n                    var dx = -1\n                    var dy = 0\n                    wallX = x\n                        wallY = y\n                    if (getTile(x+dx,y+dy,mapWidth, t) !== 0){\n                        wallFound = true\n                        wallDirX = dx\n                        wallDirY = dy\n                    } else {\n                        dx = 1\n                        if (getTile(x+dx,y+dy,mapWidth, t) !== 0){\n                            wallFound = true\n                            wallDirX = dx\n                            wallDirY = dy\n                        } else {\n                            dx = 0\n                            dy = 1\n                            if (getTile(x+dx,y+dy,mapWidth, t) !== 0){\n                                wallFound = true\n                                wallDirX = dx\n                                wallDirY = dy\n                            } else {\n                                dy = -1\n                                if (getTile(x+dx,y+dy,mapWidth, t) !== 0){\n                                    wallFound = true                                  \n                                    wallDirX = dx\n                                    wallDirY = dy\n                                }\n                            }\n                        } \n                    }\n                    \n                }\n            }\n            return [wallFound, wallX, wallY, wallDirX, wallDirY]\n}\n\n\n\nconst Dungeon = (props) => {\n    const [tiles, setTiles] = React.useState([])\n    const [bitmasks, setBitmasks] = React.useState(null)\n    const [doorMasks, setDoorMasks] = React.useState(null)\n    const [drawMasks, setDrawMasks] = React.useState(null)\n    const [icons, setIcons] = React.useState(null)\n    const [selectedRoom, setSelectedRoom] = React.useState(0)\n    //const [grid, setGrid] = React.useState(new PF.grid(props.width, props.height))\n    \n    React.useEffect(() => {\n        const rand = random.create(props.seed)\n        var mapWidth = props.width\n        var mapHeight = props.height\n        const t = []\n        const masks = []\n        const doorMasks = []\n        const newDrawMasks = []\n        const icons = []\n        //setGrid(new PF.grid(props.width, props.height))\n\n        for (var x = 0; x < props.width; x++){\n            for (var y = 0; y < mapHeight; y++){\n                t.push(rand.range(0))    \n                masks.push(0)\n                doorMasks.push(0)\n                newDrawMasks.push(0)\n                icons.push(0)\n            }\n        }\n        //setTile(1,1,props.width, t, 1);\n\n        var roomID = 3;\n\n        // for (var tries = 0; tries < 100; tries++){\n        //     var x = rand.range(mapWidth)\n        //     var y = rand.range(mapHeight)\n        //     var w = rand.intBetween(3, mapWidth/2);\n        //     var h = rand.intBetween(3, mapHeight/2);\n        //     if (isEmpty(x, y, mapWidth, t, w, h)){\n        //         console.log(\"draw room \" + x + \" \" + y + \" w \" + w + \" h \" + h)\n        //         setTileSquare(x, y, mapWidth, t, roomID++, w, h)\n        //         if (roomID > 7) roomID = 7\n        //     }\n        // }\n\n//      Fill the whole map with solid earth\n//      Dig out a single room in the centre of the map\n        {\n            var w = rand.intBetween(3, mapWidth/2);\n            var h = rand.intBetween(3, mapHeight/2);\n            var x = Math.floor(mapWidth/2)-Math.floor(w/2)\n            var y = Math.floor(mapHeight/2)-Math.floor(h/2)\n            // x = 0\n            // y = 1\n            // w = mapWidth\n            // h = 1\n            // console.log(\"start pos \" + x + \", \" + y)s\n            setTileSquare(x, y, mapWidth, t, roomID++, w, h)\n            setTileOr(x+Math.floor(w/2), y+Math.floor(h/2), mapWidth, icons, ICON_ROOM_NUMBER)\n\n        }\n\n        for (var tries = 0; tries < 2; tries++){\n            //      Pick a wall of any room\n                        var [wallFound, wallX, wallY, wallDirX, wallDirY] = findWall(t, mapWidth, mapHeight, rand)\n                        if (wallFound){\n            //      Decide upon a new feature to build\n                            var [feature, fw, fh] = getRoad(rand, wallDirX, wallDirY, mapWidth, mapHeight, mapWidth/2)\n            //      See if there is room to add the new feature through the chosen wall\n                            if (isEmptyDir(wallX, wallY, mapWidth, t, fw, fh, wallDirX, wallDirY)){\n                                //      Add the feature through the chosen wall\n                                roomID = feature(wallX, wallY, fw, fh, wallDirX, wallDirY, roomID, mapWidth, t, rand, doorMasks)\n                            }\n                        }\n                    }\n\n        for (var tries = 0; tries < mapWidth*mapHeight*2; tries++){\n//      Pick a wall of any room\n            var [wallFound, wallX, wallY, wallDirX, wallDirY] = findWall(t, mapWidth, mapHeight, rand)\n            if (wallFound){\n//      Decide upon a new feature to build\n                var [feature, fw, fh] = getFeature(rand, wallDirX, wallDirY, mapWidth, mapHeight)\n//      See if there is room to add the new feature through the chosen wall\n                if (isEmptyDir(wallX, wallY, mapWidth, t, fw, fh, wallDirX, wallDirY)){\n                    //      Add the feature through the chosen wall\n                    roomID = feature(wallX, wallY, fw, fh, wallDirX, wallDirY, roomID, mapWidth, t, rand, doorMasks, icons)\n                }\n            }\n        }\n//      Add the up and down staircases at random points in map\n//      Finally, sprinkle some monsters and items liberally over dungeon\n\n        setTiles(t)\n        calculateBitmasks(t, masks, mapWidth, mapHeight)\n        randomizeDraw(mapWidth, newDrawMasks, rand)\n        setDrawMasks(newDrawMasks)\n        setBitmasks(masks)\n        setDoorMasks(doorMasks)\n        setIcons(icons)\n        // console.log(\"make map\")\n\n    }, [props.seed, props.width, props.height])\n\n\n    const [_, forceUpdate] = React.useReducer((x) => x + 1, 0);\n\n    const tileEntries = []\n    var height = Math.floor(tiles.length / props.width)\n    var allTiles = []\n    const rand = random.create(props.seed)\n\n    let onSelectRoom = (id) => {\n        setSelectedRoom(id)\n    }\n\n    for (var y = 0; y < height; y++){\n        var row = [];\n        var w = props.width\n        \n        for (var x = 0; x < props.width; x++){\n            var tile = getTile(x, y, w, tiles)\n            var bitmask = getTile(x, y, w, bitmasks)\n            // bitmask = 15\n            var tileID = (x + y) % 4;\n            tileID = rand.intBetween(0, 3)\n        \n            // tileID = 5\n            //var on = (x+y)%2\n            var on = getTile(x, y, w, drawMasks)\n            // on = 15\n            var door = getTile(x, y, w, doorMasks)\n            // tileID = 3\n            var className = \"tile\" + tileID + \" tilebase \"\n            className += \" roomColor\" + Math.min(tile, 3)\n            if (!(bitmask & UP) || (!(on & UP) && y >1)){\n                className += \" tilenoborderT\"\n            } \n            if (!(bitmask & DOWN) || (!(on & DOWN) && y < height-2)) {\n                className += \" tilenoborderB\"\n            }\n            if (!(bitmask & LEFT) || (!(on & LEFT) && x > 1)) {\n                className += \" tilenoborderL\"\n            }\n            if (!(bitmask & RIGHT) || (!(on & RIGHT) && x < w-2)) {\n                className += \" tilenoborderR\"\n            }\n\n            if (door & UP) {\n                className += \" tiledoorT\"\n                if ((door & DISABLED))\n                 className += \" tilenoborderT\"\n            }\n            if (door & DOWN){\n                className += \" tiledoorB\"\n                if ((door & DISABLED))\n                 className += \" tilenoborderB\"\n            }\n            if (door & LEFT){\n                className += \" tiledoorL\"\n                if ((door & DISABLED))\n                 className += \" tilenoborderL\"\n            }\n            if (door & RIGHT){\n                className += \" tiledoorR\"\n                if ((door & DISABLED))\n                 className += \" tilenoborderR\"\n            }\n\n            const iconElements = []\n            // iconElements.push(<div class=\"icon\">{\" \"}</div>)\n            var icon = getTile(x, y, w, icons)\n            if (icon & ICON_ROOM_NUMBER){\n                const roomID = tile;\n                iconElements.push(<div className=\"icon\" roomID = {tile} >{tile}</div>)\n            }\n\n            // const Icon = styled.span`\n            //     width: ${(props) => 95/props.width}vmin;\n            //     height: ${(props) => 95/props.width}vmin;\n                \n            // `\n            // iconElements.push(<FaBeer className=\"icon\" ></FaBeer>)\n            \n            // row.push\n            allTiles.push\n            (<Tile width={props.width}\n                className={className}\n                x = {x} y = {y} w = {w} doorMasks= {doorMasks} setDoorMasks= {setDoorMasks} setTile = {setTile} tiles= {tiles} onSelectRoom = {onSelectRoom}\n\n                >{iconElements} </Tile>)\n        }\n        // tileEntries.push(<div>{row}</div>)\n    }\n    \n    // width: ${(props) => 95/props.width}vmin;\n    // height: ${(props) => 95/props.width}vmin;\n    const Div = styled.div`\n    grid-template-rows: repeat(${(props) => props.width}, 1fr);\n    grid-template-columns: repeat(${(props) => props.height}, 1fr);\n`\n    return <div>\n        <Div className=\"tile-container\" width= {props.width} height={props.height}>\n        \n        {allTiles}\n       \n    \n        </Div>\n       \n        </div>\n}\n\nexport default Dungeon","import { useEffect } from \"react\";\n//import tsv from './kfc.tsv'\nimport React from 'react'\nimport Random from 'random-seed'\n\nconst MonsterTable = (props) => {\n  //console.log(\"draw monster table\")\n    \n  const multipliers = [1, 1, 1.5, 2, 2, 2, 2, 2.5, 2.5, 2.5, 2.5, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n\n  const [xp, setXP] = React.useState(0)\n  const [list, setList] = React.useState([])\n  React.useEffect(() => {\n    var list = [];\n    var xp = 0;\n    var done = false;\n    if (!props.environment){\n      //console.log(\"no env\") \n      return\n    } \n    \n    var env = props.environment.get(props.environmentString);\n    var tries = 0;\n    var random = Random.create(props.seed)\n    console.log(\"recalc list\" + props.seed)\n  \n    while (env && !done && tries++ < 10000){\n      var index = random(env.length)\n      var mon = env[Math.floor(index)]\n      //console.log(\"try \" + index + \" \" + env.length)\n      if (mon.xp > props.xpTargets[props.difficulty] - xp * (props.adjust?multipliers[list.length+1]:1)){\n        // console.log(\"early exit\" + list.length)\n        continue;\n      }\n      else {\n        list.push(mon);\n        xp += mon.xp;\n        while (xp * (props.adjust?multipliers[list.length]:1) > props.xpTargets[props.difficulty] || list.length > props.max){\n          var diff = xp * (props.adjust?multipliers[list.length]:1) - props.xpTargets[props.difficulty]\n          //remove smallest xp larger than diff\n          var smallest = 1000000;\n          var smallestI = -1;\n          for (var i = 0; i < list.length; i++){\n            var m = list[i];\n            if (m.xp < smallest){\n              smallest = m.xp;\n              smallestI = i;\n            }\n          }\n          //console.log(\"remove \" + list.length)\n          xp -= list[smallestI].xp;\n          list.splice(smallestI, 1);\n        }\n        if (xp * (props.adjust?multipliers[list.length]:1) > props.xpTargets[props.difficulty] * 0.8){\n          done = true;\n          // console.log(\"done \" + list.length)\n        }else {\n          // console.log(\"not done \" + list.length)\n        }\n\n      } \n    }\n    setXP(xp)\n    setList(list)\n  }, [ props.seed]);//[ props.xpTargets[0], props.seed, props.max, props.environmentString]);\n\n  const copyMonster = (e) => {\n    const newList = list.map((el) => {\n      return el\n    })\n    setXP(xp + list[e.target.id].xp)\n    newList.push(list[e.target.id])\n    setList(newList);\n    // console.log(\"copy monster \" + e.target.id)\n  }\n  const removeMonster = (e) => {\n    const newList = list.map((el) => {\n      return el\n    })\n    setXP(xp - list[e.target.id].xp)\n    newList.splice(e.target.id, 1)\n    setList(newList);\n    // console.log(\"copy monster \" + e.target.id)\n  }\n\n  var i =0;\n  var monsters = list.map((e) => {\n    const el = <div  key={i} className=\"results\">{e.name} ({e.xp}) <button id={i} onClick={copyMonster}>+</button> <button id={i} onClick={removeMonster}>-</button></div>\n    i++\n    return el\n  })\n  const progressValue = [0,0,0,0]\n  for (var i = 0; i < 4; i++){\n    progressValue[i] = xp * (props.adjust?multipliers[list.length]:1)\n  }\n  return <div >\n      XP: {xp} * {(props.adjust?multipliers[list.length]:1)} = {xp * (props.adjust?multipliers[list.length]:1)} / {props.xpTargets[props.difficulty]}\n      \n      {monsters}\n      <div>\n        XP: {xp}\n      </div>\n\n      <div className = \"flex-container\">\n        <div className=\"column-container\">\n          <meter max={props.xpTargets[0]} min = {0} value={progressValue[0]}></meter>\n          Easy\n          <br/>({props.xpTargets[0]})\n        </div>\n        <div className=\"column-container\">\n          <meter max={props.xpTargets[1]} min = {props.xpTargets[0]} value={progressValue[1]}></meter>\n          Normal\n          <br/>({props.xpTargets[1]})\n        </div>\n        <div className=\"column-container\">\n          <meter max={props.xpTargets[2]} min = {props.xpTargets[1]} value={progressValue[2]}></meter>\n          Hard\n          <br/>({props.xpTargets[2]})     \n        </div>\n        <div className=\"column-container\">\n          <meter max={props.xpTargets[3]} min = {props.xpTargets[2]} value={progressValue[3]}></meter>\n          Deadly\n          <br/>({props.xpTargets[3]})\n        </div>\n      </div>\n      \n      \n      \n  </div>\n    \n}\n\nexport default MonsterTable;","import React, { useEffect } from 'react'\nimport MonsterTable from './monsterTable'\n\n\n\n\nconst MonsterGenerator = (props) => {\n    const xpByCharLevel = [\n        [0, 0, 0, 0]\n        , [25, 50, 75, 100]//1\n        , [50, 100, 150, 200]\n        , [75, 150, 225, 400]\n        , [125, 250, 375, 500]\n        , [250, 500, 750, 1100]\n        , [300, 600, 900, 1400]\n        , [350, 750, 1100, 1700]\n        , [450, 900, 1400, 2100]//8\n        , [550, 1100, 1600, 2400]\n        , [600, 1200, 1900, 2800]//10\n        , [800, 1600, 2400, 3600]\n        , [1000, 2000, 3000, 4500] \n        , [1100, 2200, 3400, 5100]\n        , [1250, 2500, 3800, 5700]\n        , [1400, 2800, 4300, 6400]\n        , [1600, 3200, 4800, 7200]\n        , [2000, 3900, 5900, 8800]\n        , [2100, 4200, 6300, 9500]\n        , [2400, 4900, 7300, 10900]\n        , [2800, 5700, 8500, 12700]//20\n    ]\n    \n    const [compensate, setCompensate] = React.useState( props.compensate)\n    const [seed, setSeed] = React.useState(props.seed)\n    const [players, setPlayers] = React.useState(props.players)\n    const [playerLevel, setPlayerLevel] = React.useState(props.playerLevel)\n    const [charLevels, setCharLevels] = React.useState([1,1,1,1])\n    const [environmentString, setEnvironmentString] = React.useState(props.environmentString)\n    const [maxMonsters, setMaxMonsters] = React.useState(10)\n    const [difficulty, setDifficulty] = React.useState(1)\n    //from https://makeaskillcheck.com/5e-how-does-cr-work/\n    \n    React.useEffect(() => {\n        //console.log(\"change params\")\n        setCompensate(props.compensate)\n        setSeed(props.seed)\n        setPlayers(props.players)\n        setPlayerLevel(props.playerLevel)\n        //setCharLevels(props.charLevels)\n        setEnvironmentString(props.environmentString)\n        \n       \n    }\n        , [props.compensate, props.seed, props.players, props.playerLevel, props.charLevels, props.environmentString, props.maxMonsters, props.difficulty])\n    \n    const environment = props.environment\n\n\n    const setCharLevelArray = () => {\n        var arr = []\n        for (var i = 0; i < players; i++){\n            arr.push(playerLevel)\n            //console.log(\"playerl \" + playerLevel)\n        }\n        setCharLevels(arr)\n    }\n    useEffect(() => {\n        setCharLevelArray()\n    }, [players, playerLevel])\n\n    var xpTargets = [0,0,0,0];\n    for (var i = 0; i < charLevels.length; i++){\n        for (var t = 0; t < 4; t++){\n        xpTargets[t] += xpByCharLevel[charLevels[i]][t];\n        //console.log(\"mul \" + xpTargets[t] )\n        }\n        //console.log(\" \")\n    }\n//    \n    \n\n    const generate = () => {\n        setSeed(Math.floor(Math.random() * 100000))\n    }\n    return <div className=\"container\">\n        \n        <div >\n            {/* <div>\n            Compensate for Action Economy <input type=\"checkbox\" checked = {compensate} onChange={(event) => {setCompensate(event.target.checked)}} />\n            </div> */}\n            <div>\n            Players: <input type=\"number\" min=\"1\" max=\"20\" value={players} onChange = {(event) => {setPlayers(event.target.value); }}/>\n            x Level <input type=\"number\" min=\"1\" max=\"20\" value={playerLevel} onChange = {(event) => {setPlayerLevel(event.target.value);}}/>\n            </div>\n\n            <div>\n                Max Monsters: <input type=\"number\" min=\"1\" max=\"30\" value={maxMonsters} onChange = {(event) => {setMaxMonsters(event.target.value)}} />\n            </div>\n\n            <div>\n                Difficulty\n                <select onChange={(event) => {setDifficulty(event.target.value); localStorage.setItem(\"difficulty\", difficulty)}} value = {difficulty}>\n                    <option value=\"0\">Easy</option>\n                    <option value=\"1\">Normal</option>\n                    <option value=\"2\">Hard</option>\n                    <option value=\"3\">Deadly</option>\n                </select>\n            </div>\n\n            <div>\n                Environment\n                <select onChange= {(event) => {setEnvironmentString(event.target.value)} } value={environmentString}>\n                    <option value=\"forest\">Forest</option>\n                    <option value=\"underground\">Underground</option>\n                    <option value=\"swamp\">Swamp</option>\n                    <option value=\"desert\">Desert</option>\n                    <option value=\"cave\">Cave</option>\n                    <option value=\"dungeon\">Dungeon</option>\n                    <option value=\"planar\">Planar</option>\n                    <option value=\"grassland\">Grassland</option>\n                    <option value=\"mountain\">Mountain</option>\n                    <option value=\"ruins\">Ruins</option>\n                    <option value=\"aquatic\">Aquatic</option>\n                    <option value=\"urban\">Urban</option>\n                    <option value=\"arctic\">Arctic</option>\n                    <option value=\"coast\">Coast</option>\n                    \n                </select>\n            </div>\n            <div>\n                <button onClick={generate}>Generate</button>\n            </div>\n        </div>\n\n        <div>\n            <MonsterTable environmentString={environmentString} environment = {environment} max={maxMonsters} difficulty = {difficulty} xpTargets={xpTargets} adjust={compensate} seed = {seed}/>\n        </div>\n        \n        </div>\n\n}\n\nexport default MonsterGenerator;","import logo from './logo.svg';\nimport './App.css';\nimport Dungeon from './dungeon'\nimport MonsterGenerator from './monsterGenerator'\nimport Papa from 'papaparse'\nimport React from 'react'\nimport {Route, Routes, Link} from 'react-router-dom'\n\nfunction App() {\n\n  const crToXP = new Map();\n  crToXP.set(\"0\", 10)\n  crToXP.set(\"1/8\", 25)\n  crToXP.set(\"1/4\", 50)\n  crToXP.set(\"1/2\", 100)\n  crToXP.set(\"1\", 200)\n  crToXP.set(\"2\", 450)\n  crToXP.set(\"3\", 700)\n  crToXP.set(\"4\", 1100)\n  crToXP.set(\"5\", 1800)\n  crToXP.set(\"6\", 2300)\n  crToXP.set(\"7\", 2900)\n  crToXP.set(\"8\", 3900)\n  crToXP.set(\"9\", 5000)\n  crToXP.set(\"10\", 5900)\n  crToXP.set(\"11\", 7200)\n  crToXP.set(\"12\", 8400)\n  crToXP.set(\"13\", 10000)\n  crToXP.set(\"14\", 11500)\n  crToXP.set(\"15\", 13000)\n  crToXP.set(\"16\", 15000)\n  crToXP.set(\"17\", 18000)\n  crToXP.set(\"18\", 20000)\n  crToXP.set(\"19\", 22000)\n  crToXP.set(\"20\", 25000)\n  crToXP.set(\"21\", 33000)\n  crToXP.set(\"22\", 41000)\n  crToXP.set(\"23\", 50000)\n  crToXP.set(\"24\", 62000)\n  crToXP.set(\"30\", 155000)\n\n  const [environment, setEnvironment] = React.useState(new Map())\n    React.useEffect(() => {\n        async function getData() {\n            const response = await fetch('/kfc.tsv')\n            //console.log(response.text)\n            const reader = response.body.getReader()\n            const result = await reader.read() // raw array\n            const decoder = new TextDecoder('utf-8')\n            const csv = decoder.decode(result.value) // the csv text\n            const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n            const rowsV = results.data// array of objects\n            const environments = new Map();\n            \n            rowsV.map((e) => {\n                if (!e.environment) return\n                const envs = e.environment.split(\",\")\n                envs.map((en) => {\n                en = en.replace(/\\s/g, '')\n                if (!environments.has(en)){\n                    var newArr = new Array();\n                    environments.set(en, newArr);\n                    // console.log ( \"new \" + en  )\n                }\n                \n                //console.log ( \"write \" + en )\n                //console.log ( \"write \" + e.cr )\n                e.xp = crToXP.get(e.cr);\n                if (en) environments.get(en).push(e)\n                //if (!e) console.log(\"error\")\n\n                })\n            })\n            setEnvironment(environments)\n            console.log(\"done reading tsv\")\n        }\n        getData()\n    // setInterval(() => {console.log(rows)}, 2000)\n    }, []) // [] means just do this once, after initial render\n\n    const [maxMonsters, setMaxMonsters] = React.useState(10)\n    const [difficulty, setDifficulty] = React.useState(1)\n    const [compensate, setCompensate] = React.useState( true)\n    const [seed, setSeed] = React.useState(111)\n    const [players, setPlayers] = React.useState(4)\n    const [playerLevel, setPlayerLevel] = React.useState(1)\n    const [charLevels, setCharLevels] = React.useState([1, 1, 1, 1])\n    const [environmentString, setEnvironmentString] = React.useState(\"forest\")\n\n    const generate = () => {\n      setSeed(Math.floor(Math.random() * 100000))\n    }\n  \n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n      \n      </header>\n      <Routes>\n        <Route path=\"/\" element= {\n        <div>\n          <div>\n            Players: <input type=\"number\" min=\"1\" max=\"20\" value={players} onChange = {(event) => {setPlayers(event.target.value); }}/>\n            x Level <input type=\"number\" min=\"1\" max=\"20\" value={playerLevel} onChange = {(event) => {setPlayerLevel(event.target.value);}}/>\n            </div>\n            <div>\n                Environment\n                <select onChange= {(event) => {setEnvironmentString(event.target.value)}}>\n                    <option value=\"forest\">Forest</option>\n                    <option value=\"underground\">Underground</option>\n                    <option value=\"swamp\">Swamp</option>\n                    <option value=\"desert\">Desert</option>\n                    <option value=\"cave\">Cave</option>\n                    <option value=\"dungeon\">Dungeon</option>\n                    <option value=\"planar\">Planar</option>\n                    <option value=\"grassland\">Grassland</option>\n                    <option value=\"mountain\">Mountain</option>\n                    <option value=\"ruins\">Ruins</option>\n                    <option value=\"aquatic\">Aquatic</option>\n                    <option value=\"urban\">Urban</option>\n                    <option value=\"arctic\">Arctic</option>\n                    <option value=\"coast\">Coast</option>\n                    \n                </select>\n            </div>\n            <div>\n              <Link to=\"/dungeon\">\n                  <button onClick={generate}>Generate</button>\n                </Link>\n            </div>\n\n            \n\n        </div>\n        }>\n        \n        </Route>\n\n        <Route path=\"/dungeon\" element=\n        {\n          <Dungeon width={20} height= {20} seed={220}>\n          \n          </Dungeon>\n        }>\n        \n\n        </Route>\n\n        <Route path=\"/monster\" element= {\n        <div>\n           <MonsterGenerator  environment = {environment} environmentString = {environmentString} \n            compensate= {compensate} seed= {seed}  \n            players= {players} playerLevel= {playerLevel}/>\n        </div>\n        }>\n          \n\n        </Route>\n      </Routes>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}